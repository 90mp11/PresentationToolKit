{"functions": ["def create_blank_presentation(template='./templates/_template.pptx'):\n    prs = Presentation(template)\n    return prs\n\n", "def save_exit(prs, modifier=\"\", folder=\"\"):\n    # Save the PowerPoint presentation\n    today = date.today()\n    current_time = datetime.now().strftime(\"%H%M\")  # Get current hour and minute\n    output_pptx = f'PEA_Project_Report_{today.strftime(\"%y%m%d\")}_{current_time}'\n    output_pptx += modifier\n    output_pptx += \".pptx\"\n\n    save_to_location = folder + output_pptx\n    prs.save(save_to_location)\n    return output_pptx\n\n", "def placeholder_identifier(slide):\n    for shape in slide.shapes:\n        if shape.is_placeholder:\n            phf = shape.placeholder_format\n        print('%d, %s' % (phf.idx, phf.type))\n\n", "def create_title_slide(prs, title=\"\"):\n    section_slide = prs.slides.add_slide(prs.slide_masters[1].slide_layouts[3])  # Blank slide layout\n    # Set slide title to Objective\n    title_shape = section_slide.shapes.title\n    title_shape.text = f'{title}'\n\n", "def set_title(slide, title_text=\"\"):\n    # Set slide title to Project Owner's name\n    title_shape = slide.shapes.title\n    title_shape.text = title_text\n\n", "def set_three_col_subtitle(slide):\n    subtitle = const.THREE_COL_TITLES\n    #hardcoded idx values that will be consistent for prs.slide_masters[1].slide_layouts[6] only\n    slide.placeholders[27].text = subtitle['col1']\n    slide.placeholders[29].text = subtitle['col2']\n    slide.placeholders[31].text = subtitle['col3']\n    return\n\n", "def set_document_release_subtitle(slide, heading='new', date = '08/09/2023'):\n    subtitle = const.DOC_BOARD_TITLES\n    #hardcoded idx values that will be consistent for prs.slide_masters[1].slide_layouts[7] only\n    slide.placeholders[27].text = subtitle[heading]\n    slide.placeholders[28].text = date\n    return\n\n", "def create_project_button(slide, left, top, status=\"\", contents_text=\"CONTENT\", OVERRIDE=\"\"):\n    if OVERRIDE == \"\":\n        BUTTON_DEF = const.PROJECT_BUTTON_CONSTANTS\n    else:\n        BUTTON_DEF = OVERRIDE\n\n    # Add a rounded rectangle shape\n    rounded_rectangle = slide.shapes.add_shape(MSO_SHAPE.ROUNDED_RECTANGLE,\n                                            left, top, BUTTON_DEF['rectangle_width'], BUTTON_DEF['rectangle_height'])\n    if status == \"\":\n        FILL_COLOUR = OVERRIDE.get('fill', const.ThemeColors.PINK)\n        FONT_COLOUR = OVERRIDE.get('font_colour', const.ThemeColors.WHITE)\n        BORDER_COLOUR = OVERRIDE.get('border', const.ThemeColors.PINK)\n    else:\n        FILL_COLOUR = const.STATUS_COLOUR.get(status, const.ThemeColors.PINK)\n        BORDER_COLOUR = FILL_COLOUR\n        FONT_COLOUR = 0\n\n    # Customize the rectangle Fill\n    fill = rounded_rectangle.fill\n    fill.solid()\n    fill.fore_color.theme_color = FILL_COLOUR\n\n    # Customize the rectangle line\n    line = rounded_rectangle.line\n    line.color.theme_color = BORDER_COLOUR      \n    line.color.brightness = -0.50 \n\n    # Remove all Shadows\n    shadow = rounded_rectangle.shadow\n    shadow.inherit = False\n    shadow.blur_radius = Cm(0)\n    shadow.distance = Cm(0)\n    shadow.angle = 0\n    shadow.alpha = 0\n\n    text_box = rounded_rectangle.text_frame\n    text_box.text = contents_text\n    text_box.vertical_anchor = MSO_ANCHOR.TOP\n\n    first = 1\n    for paragraph in text_box.paragraphs:\n        for run in paragraph.runs:\n            if FONT_COLOUR != 0:\n                run.font.color.theme_color = FONT_COLOUR\n            if first == 1:\n                run.font.bold = True\n                first = 0\n            run.font.size = BUTTON_DEF['font_size']\n    first = 1\n\n", "def row_calculator(index, type=1):\n    result = index / type\n    row = math.floor(result)\n    return row\n\n", "def populate_column(df, slide, BUTTON_FORMAT, SLIDE_FORMAT, COLUMN_FORMAT, type_flag='ProjectOwner', col=1):\n    for index, (_, project) in enumerate(df.iterrows()):\n        # Calculate current row and column\n        row = row_calculator(index, col)\n        \n        status = project['Status']\n\n        # Calculate position for the current rectangle\n        left = COLUMN_FORMAT['left']  \n\n        if 'right' in COLUMN_FORMAT:\n            right = COLUMN_FORMAT['right']\n        else:\n            right = left\n        \n        if not index % 2 == 0:\n            left = right\n\n        top = SLIDE_FORMAT['start_top'] + row * (BUTTON_FORMAT['rectangle_height'] + SLIDE_FORMAT['vertical_spacing'])\n\n        # Add project details to the rectangle (based on \"type_flag\" for specific contents)\n        if type_flag == 'ProjectOwner':\n            contents_text = f\"{project['Title']}\\n\"\n            contents_text += f\"Objective: {project['Objective']}\\n\"\n            contents_text += f\"Staging: {const.get_staging_text(project['Staging'])}\\n\"\n            contents_text += f\"Priority: {const.get_priority_text(project['Priority'])}\"\n            if project['Status'] == 'Blocked':\n                contents_text += f\"\\nBlocked: {project['Closure Comments']}\"\n\n        if type_flag == 'Objective':\n            contents_text = f\"{project['Title']}\\n\"\n            contents_text += f\"Owner: {project['Primary Owner']}\\n\"\n            contents_text += f\"Staging: {const.get_staging_text(project['Staging'])}\\n\"\n            contents_text += f\"{const.get_priority_text(project['Priority'])}\"\n\n        if type_flag == 'Impact':\n            contents_text = f\"{project['Title']}\\n\"\n            contents_text += f\"Staging: {const.get_staging_text(project['Staging'])}\"\n               \n        if type_flag == 'OnHold':\n            contents_text = f\"{project['Title']}\\n\"\n            contents_text += f\"Owner: {project['Primary Owner']}\\n\"\n            contents_text += f\"Staging: {const.get_staging_text(project['Staging'])}\\n\"\n            contents_text += \"Project Summary: \"\n            if not pd.isna(project['Project Summary']):\n                contents_text += f\"{project['Project Summary']}\"\n\n        create_project_button(slide, left, top, status, contents_text, OVERRIDE=BUTTON_FORMAT)\n\n", "def create_body_slide_three_cols(df_1, df_2, df_3, prs, type_flag='ProjectOwner', title_text=\"\", BUTTON_OVERRIDE=\"\"):\n    # Function to take contents of df (dataframe) and output onto a 3 column grid using pre-sets from constants.py\n    # Set grid parameters\n    columns = 3  # Number of columns in the grid\n\n    # Create a new slide\n    slide = prs.slides.add_slide(prs.slide_masters[1].slide_layouts[6])  # Blank slide layout\n    set_title(slide, title_text)\n    set_three_col_subtitle(slide)\n\n    # Set up Constants\n    SLIDE_DEF = const.THREE_COL_SLIDE_CONSTANTS\n\n    #Hardcoding in the Column1 Button Dimension - fix in future revision\n    COL1_BUTTON_DEF = const.THREE_COL_PROJECT_BUTTON_COL1_CONSTANTS\n\n    if BUTTON_OVERRIDE == \"\":\n        BUTTON_DEF = const.THREE_COL_PROJECT_BUTTON_CONSTANTS\n    else:\n        BUTTON_DEF = BUTTON_OVERRIDE\n\n    COLUMN_1 = {\n        'left': SLIDE_DEF['start_left_col1'],\n        'right': SLIDE_DEF['start_left_col2']\n    }\n    COLUMN_2 = {\n        'left': SLIDE_DEF['start_left_col3']\n    }\n    COLUMN_3 = {\n        'left': SLIDE_DEF['start_left_col4']\n    }\n        # Iterate through each project and add a rounded rectangle (COLUMN 1)\n    populate_column(df_1, slide, COL1_BUTTON_DEF, SLIDE_DEF, COLUMN_1, type_flag, col=2)\n    populate_column(df_2, slide, BUTTON_DEF, SLIDE_DEF, COLUMN_2, type_flag)\n    populate_column(df_3, slide, BUTTON_DEF, SLIDE_DEF, COLUMN_3, type_flag)\n\n", "def create_body_slide_four_cols(df, prs, type_flag='ProjectOwner', title_text=\"\", BUTTON_OVERRIDE=\"\"):\n    # Function to take contents of df (dataframe) and output onto a 4 column grid using pre-sets from constants.py\n    # Set grid parameters\n    columns = 4  # Number of columns in the grid\n\n    # Create a new slide\n    slide = prs.slides.add_slide(prs.slide_masters[1].slide_layouts[5])  # Blank slide layout\n    set_title(slide, title_text)\n\n    # Set up Constants\n    SLIDE_DEF = const.FOUR_COL_SLIDE_CONSTANTS\n\n    if BUTTON_OVERRIDE == \"\":\n        BUTTON_DEF = const.PROJECT_BUTTON_CONSTANTS\n    else:\n        BUTTON_DEF = BUTTON_OVERRIDE\n\n        # Iterate through each project and add a rounded rectangle\n    for index, (_, project) in enumerate(df.iterrows()):\n        # Calculate current row and column\n        row = index // columns\n        column = index % columns\n        status = project['Status']\n\n        # Calculate position for the current rectangle\n        left = SLIDE_DEF['start_left'] + column * (BUTTON_DEF['rectangle_width'] + SLIDE_DEF['horizontal_spacing'])\n        top = SLIDE_DEF['start_top'] + row * (BUTTON_DEF['rectangle_height'] + SLIDE_DEF['vertical_spacing'])\n\n        # Add project details to the rectangle (based on \"type_flag\" for specific contents)\n        if type_flag == 'ProjectOwner':\n            contents_text = f\"{project['Title']}\\n\"\n            contents_text += f\"Objective: {project['Objective']}\\n\"\n            contents_text += f\"Staging: {const.get_staging_text(project['Staging'])}\\n\"\n            contents_text += f\"Priority: {const.get_priority_text(project['Priority'])}\"\n            if project['Status'] == 'Blocked':\n                contents_text += f\"\\nBlocked: {project['Closure Comments']}\"\n\n        if type_flag == 'Objective':\n            contents_text = f\"{project['Title']}\\n\"\n            contents_text += f\"Owner: {project['Primary Owner']}\\n\"\n            contents_text += f\"Staging: {const.get_staging_text(project['Staging'])}\\n\"\n            contents_text += f\"{const.get_priority_text(project['Priority'])}\"\n\n        if type_flag == 'Impact':\n            contents_text = f\"{project['Title']}\\n\"\n            contents_text += f\"Owner: {project['Primary Owner']}\\n\"\n            contents_text += f\"Staging: {const.get_staging_text(project['Staging'])}\\n\"\n            contents_text += f\"{const.get_priority_text(project['Priority'])}\"\n\n        if type_flag == 'OnHold':\n            contents_text = f\"{project['Title']}\\n\"\n            contents_text += f\"Owner: {project['Primary Owner']}\\n\"\n            contents_text += f\"Staging: {const.get_staging_text(project['Staging'])}\\n\"\n            contents_text += f\"Project Summary: {project['Project Summary']}\"\n\n        if type_flag == 'Release Forecast':\n            contents_text = f\"Document: {project['Doc Reference']}\\n\"\n            contents_text += f\"Title: {project['Title']}\\n\"\n            contents_text += f\"Owner: {project['Primary Owner']}\"\n\n        create_project_button(slide, left, top, status, contents_text, OVERRIDE=BUTTON_DEF)\n\n", "def create_OnHold_slides(df, prs, no_section=False):\n    if no_section == False:\n        create_title_slide(prs, f'On Hold Projects')\n    #Filter the dataframe to only the OnHold projects\n    on_hold = du.filter_dataframe_by_status(df, 'On Hold')\n    sorted = on_hold.sort_values(by=['Primary Owner'])\n    title_text = \"On-Hold Projects - \" + str(len(on_hold))\n    create_body_slide_four_cols(sorted, prs, type_flag='OnHold', title_text=title_text, BUTTON_OVERRIDE=const.ONHOLD_BUTTON_CONSTANTS)\n\n", "def create_ProjectOwner_slides(df, prs, filter=\"\"):\n    \n    # Group projects by Project Owner\n    grouped = df.groupby('Primary Owner')\n\n    # Iterate through each Project Owner and their projects\n    for owner, projects in grouped:\n        if not filter == \"\":\n            if filter and filter.lower() not in owner.lower():\n                continue  # Skip this owner if the filter doesn't match\n\n        title_text = owner + \" - \" + str(len(projects))\n        sorted_projects = projects.sort_values(by=['Priority', 'Objective'])\n        create_body_slide_four_cols(sorted_projects, prs, 'ProjectOwner', title_text)\n\n", "def create_Objective_slides(df, prs, filter=\"\"):\n\n    create_title_slide(prs, 'By Objective')\n\n    if not filter == \"\":\n        df = df[df['Primary Owner'].str.contains(filter, case=False, na=False)]\n\n\n    # Group projects by Objective\n    grouped = df.groupby('Objective')\n\n    # Iterate through each Objective and their projects\n    for objective, projects in grouped:\n        \n        title_text = objective  + \" - \" + str(len(projects))\n        sorted_projects = projects.sort_values(by=['Priority'])\n        create_body_slide_four_cols(sorted_projects, prs, 'Objective', title_text)\n\n", "def create_Impacted_section(df, prs, no_section=False, impacted_team='Training'):\n    if no_section == False:\n        create_title_slide(prs, f'Projects Impacting {impacted_team}')\n\n    # Filter projects by Impacted Team\n    projects = du.filter_dataframe_by_team(df, impacted_team)\n    sorted_projects = projects.sort_values(by=['Priority'])\n\n    title_text = impacted_team  + \" - \" + str(len(projects))\n", "def create_Impacted_section_OLD(df, prs, no_section=False, impacted_team='Training'):\n", "def create_project_section(df, prs, no_section=False):\n    if no_section == False:\n        create_title_slide(prs, f'Project Details')\n    \n    #DF Filtering Logic goes here\n\n    for index, (_, project) in enumerate(df.iterrows()):\n        create_single_project_slide(project, prs)\n    return\n\n", "def create_single_project_slide(project, prs, title_text=\"\"):\n\n    update = project['Project Updates']\n    if pd.isna(update):\n       update = \" \" \n    else:\n        update = du.convert_html_to_text_with_newlines(update)\n\n    action = project['Project Actions']\n    if pd.isna(action):\n       action = \" \" \n    else:\n        action = du.convert_html_to_text_with_newlines(action)\n\n    summary = project['Project Summary']\n    if pd.isna(summary):\n       summary = \" \" \n\n    slide = prs.slides.add_slide(prs.slide_masters[1].slide_layouts[7])  # Blank slide layout\n    \n    set_title(slide, project['Title'])\n\n    #Slide subtitle\n    slide.placeholders[10].text = f\"Project Summary: {summary}\"\n\n    #Column Subtitles\n    slide.placeholders[26].text = \"Project Updates\" #Left\n    slide.placeholders[28].text = \"Project Actions\" #Right\n\n    #Column Text\n    slide.placeholders[24].text = f\"{update}\" #Left\n    slide.placeholders[27].text = f\"{action}\" #Right\n\n    return\n\n", "def create_document_release_section(df, prs, filter=''):\n    \n    if filter:\n        df = df.loc[df['Release Forecast'] == filter]\n\n    grouped = df.groupby(df['Release Forecast'].fillna('None'))\n\n    for date, documents in grouped:\n        title_text = 'Technical Releases'\n\n        # Filtering based on 'Doc Reference'\n        new_docs = documents[documents['Doc Reference'].str.endswith('NEW')]\n        update_docs = documents[~documents['Doc Reference'].str.endswith('NEW')]\n\n        sorted_new_docs = new_docs.sort_values(by=['Doc Reference'])\n        sorted_update_docs = update_docs.sort_values(by=['Doc Reference'])\n\n        create_document_release_slide(sorted_new_docs, prs, date, title_text, const.DOCUMENT_BUTTON_CONSTANTS, 'new')\n        create_document_release_slide(sorted_update_docs, prs, date, title_text, const.DOCUMENT_BUTTON_CONSTANTS, 'update')\n    return\n\n", "def create_document_release_slide(df, prs, date='08/09/2023', title_text=\"\", BUTTON_OVERRIDE=\"\", type_flag='new'):\n    # Function to take contents of df (dataframe) and output onto a 2 column grid using pre-sets from constants.py for the Document Release Board\n\n    columns = 2\n\n    # Create a new slide\n    slide = prs.slides.add_slide(prs.slide_masters[1].slide_layouts[7])  # Blank slide layout\n    set_title(slide, title_text)\n    set_document_release_subtitle(slide, type_flag, date)\n\n    # Set up Constants\n    SLIDE_DEF = const.DOC_RELEASE_SLIDE_CONSTANTS\n\n    if BUTTON_OVERRIDE == \"\":\n        BUTTON_DEF = const.DOCUMENT_BUTTON_CONSTANTS\n    else:\n        BUTTON_DEF = BUTTON_OVERRIDE\n\n        # Iterate through each project and add a rounded rectangle\n    for index, (_, project) in enumerate(df.iterrows()):\n        # Calculate current row and column\n        row = index // columns\n        column = index % columns\n        status = \"\"\n\n        # Calculate position for the current rectangle\n        left = SLIDE_DEF['start_left'] + column * (BUTTON_DEF['rectangle_width'] + SLIDE_DEF['horizontal_spacing'])\n        top = SLIDE_DEF['start_top'] + row * (BUTTON_DEF['rectangle_height'] + SLIDE_DEF['vertical_spacing'])\n\n        # Add project details to the rectangle (based on \"type_flag\" for specific contents)\n        if type_flag == 'new':\n            contents_text = f\"Document: {project['Doc Reference']}\\n\"\n            contents_text += f\"Title: {project['Title']}\\n\"\n            contents_text += f\"Changes: \"\n\n        if type_flag == 'update':\n            contents_text = f\"Document: {project['Doc Reference']}\\n\"\n            contents_text += f\"Title: {project['Title']}\\n\"\n            contents_text += f\"Changes: \"\n\n        create_project_button(slide, left, top, status, contents_text, OVERRIDE=BUTTON_DEF)\n\n    return\n"], "current_index": 10}